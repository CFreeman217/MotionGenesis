% % MotionGenesis file:  MGTemplateBasic.txt
% % Copyright (c) 2009-2019 Motion Genesis LLC.  Only for use with MotionGenesis.
% %--------------------------------------------------------------------
% %   Physical objects.
% NewtonianFrame  N                % Newtonian reference frame
% RigidBody       A                % Technical name of body
% RigidFrame      B                % Comment
% Particle        Q                % Comment
% Point           O( B )           % Comment.
% %--------------------------------------------------------------------
% %   Mathematical declarations.
% Variable    qA''                 % qA and its 1st and 2nd derivatives.
% Variable    Fx, Fy               % Reaction forces
% Constant    g = 9.80665 m/s^2    % Earth's gravitational acceleration
% Specified   TA                   % Torque on A from N
% %--------------------------------------------------------------------
% %   Mass and inertia properties.
% A.SetMass( mA = 2 kg )
% Q.SetMass( mQ = 3 kg )
% A.SetInertia( Acm,  IAxx = 0.2 kg*m^2,  IAyy = 0.3 kg*m^2,  IAzz = 0.4 kg*m^2 )
% B.SetInertia( Bcm,  IBxx, IByy, IBzz,  IBxy, IByz, IBzx )
% %--------------------------------------------------------------------
% %   Rotational kinematics.
% A.RotateX( N, qA )
% B.RotateNegativeY( A, t )
% B.SetAngularVelocity( N, someVector> )
% %--------------------------------------------------------------------
% %   Translational kinematics.
% Q.SetPosition( No, positionVector> )
% Q.Translate( No, positionVector> )          % Sets position, velocity, acceleration
% Q.SetVelocityAcceleration( N, velVector> )  % Differentiates to find acceleration
% %--------------------------------------------------------------------
% %   Motion constraints (if any).
% MotionConstraint[1] = u2 - u1
% MotionConstraint[2] = Dot( Q.GetVelocity(N), Ax> )
% MotionConstraint[3] = Dot( Q.GetVelocity(N), Ay> )
% SolveDt( MotionConstraint, u3, u4, u5 )
% %--------------------------------------------------------------------
% %   Add relevant contact/distance forces.
% System.AddForceGravity( -g*Ny> )
% Q.AddForce( someVector> )                   % External force
% Q.AddForce( P, actionReactionForce> )       % Law of action/reaction
% %--------------------------------------------------------------------
% %   Add relevant torques.
% A.AddTorque( SomeVector> )                  % External torque
% B.AddTorque( A, actionReactionTorque> )     % Law of action/reaction
% %--------------------------------------------------------------------
% %   F = m*a    (translational equations of motion).
% Dynamics[1] = Dot(  B.GetDynamics(),  Nx>  )
% Dynamics[2] = Dot(  B.GetDynamics(),  Ny>  )
% %--------------------------------------------------------------------
% %   M = DH/Dt  (rotational equations of motion).
% Dynamics[3] = Dot(  B.GetDynamics(Bcm),  Bz>  )
% %--------------------------------------------------------------------
% %   Solve linear equations for list of unknowns.
% Solve( Dynamics,  x'', y'', Fx, Fy )
% %--------------------------------------------------------------------
% %   Initial values for variables (e.g., for ODE command).
% Input  qA = 30 deg,  qA' = 0 rad/sec
% Input  qB = 90 deg,  qB' = 0 rad/sec
% %--------------------------------------------------------------------
% %   Other calculations (distance, energy, momentum, etc.).
% xQ = Dot(  Q.GetPosition(No),  Nx>  )
% KineticEnergy = System.GetKineticEnergy()
% GravityPotentialEnergy = System.GetForceGravityPotentialEnergy( -g*Ny>, No )
% MechanicalEnergy = KineticEnergy + GravityPotentialEnergy
% H> = System.GetAngularMomentum( aboutPoint )
% L> = EvaluateAtInput( System.GetLinearMomentum() )
% %--------------------------------------------------------------------
% %   List output quantities (e.g., for ODE command).
% Output      t sec,  x m,  Fx Newton,  Fy Newton
% OutputPlot  t sec,  qA degrees  qB degrees
% %--------------------------------------------------------------------
% %   Solve ODEs (or auto-generate MATLAB, C, Fortran, ... code).
% Input  tFinal = 10 sec,  tStep = 0.02 sec,  absError = 1.0E-08
% ODE()  Filename    % or ODE( Zero, listOfVariablesToSolve ) Filename.m
% %--------------------------------------------------------------------
% %   Record input together with responses.
% Save  someFileName.html
% Quit

%%% ME 401 Kane's Equations EXAMPLES %%%
% % EXAMPLE 1: SIMPLE PENDULUM
% NewtonianFrame N 
% RigidFrame B 
% Particle P 
% P.SetMass(M)
% Variable q1', u1', Ts % String Tension
% SetGeneralizedSpeed(u1)
% Constant L, g 

% % Kinematical Eqns
% q1' = u1 % Trivial case

% % Rotations
% B.Rotate(N, BodyZ, Q1)

% % Positions
% P_P_Bo> = L*Bx>

% % Velocities
% V_Bo_N> = 0>
% P.SetVelocity(N, Bo)

% % Partial Velocities
% VPN_Partial1> = P.GetPartialVelocity(N, U1)

% % Accelerations
% A_Bo_N> = 0>
% P.SetAcceleration(N, Bo)

% % Forces
% P.AddForce(-Ts*Bx>)
% System.AddForceGravity(g*Nx>)

% % Kane's Equations
% F1P = dot(P.GetResultantForce(), VPN_Partial1>)
% F1NP = m*dot(a_P_N>, VPN_Partial1>)
% EOM = F1P - F1NP
% Explicit(EOM)

% % EXAMPLE 2: Double Spring Boxes
% NewtonianFrame N 
% Particle P1, P2
% P1.SetMass(M1)
% P2.SetMass(M2)
% Variable q1', q2', u1', u2'
% SetGeneralizedSpeed(u1, u2)
% Constant K1, K2

% % Kinematical Equations
% q1' = u1
% q2' = u2

% % Velocities
% V_P1_N> = u1*Nx>
% V_P2_N> = u2*Nx>

% % Partial Velocities
% VP1N_Partial1> = P1.GetPartialVelocity(N, u1)
% VP1N_Partial2> = P1.GetPartialVelocity(N, u2)
% VP2N_Partial1> = P2.GetPartialVelocity(N, u1)
% VP2N_Partial2> = P2.GetPartialVelocity(N, u2)

% % Accelerations
% A_P1_N> = dt(V_P1_N>, N)
% A_P2_N> = dt(V_P2_N>, N)

% % Forces
% P1.AddForce(P2, K2*(q2-q1)*Nx>)
% P1.AddForce(-K1*q1*Nx>)

% % Kane's Equations
% F1 = dot(P1.GetResultantForce(), VP1N_Partial1>) + dot(P2.GetResultantForce(), VP2N_Partial1>)
% F1NS = M1*dot(A_P1_N>, VP1N_Partial1>) + M2*dot(A_P2_N>, VP2N_Partial1>)
% F2 = dot(P1.GetResultantForce(), VP1N_Partial2>) + dot(P2.GetResultantForce(), VP2N_Partial2>)
% F2NS = M1*dot(A_P1_N>, VP1N_Partial2>) + M2*dot(A_P2_N>, VP2N_Partial2>)
% zero[1] = F1 - F1NS
% zero[2] = F2 - F2NS
% explicit(zero)
% % ODE(zero, u1', u2') kane_ex2.m

% Problem 6.21
NewtonianFrame N
RigidFrame B, A 
RigidBody C 

Variable theta'', phi'', wC'
Constant g, L, r 
C.SetMass(M)
C.SetInertia(Ccm, M*r^2/4*(Bx>*Bx> + By>*By> + 2*Bz>*Bz>))

A.RotateNegativeZ(N, theta)
B.RotateNegativeX(A, phi)
Express(w_B_N>, B)
C.SetAngularVelocityAcceleration(B, wC*Bz>)
Ccm.Translate(No, L*Bz>)
System.AddForceGravity(-g*Nz>)

save Mitiguy_6_21.html


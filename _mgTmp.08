   (1) % ME 493: Intermediate Dynamics
   (2) % Example 7
   (3) % Two linked bars of length 2L hang from a ceiling with spring at end of second bar anchoring to wall.
   (4) % Point P is Anchor in ceiling for Bar A at angle Q1 at distance L to the right from origin of Newtonian Frame
   (5) % Point R is hanging end of Bar A attached to Bar B
   (6) % Q2 is angle between line of Bar A and Bar B
   (7) % Point S is attached to end of Bar B and is anchored the wall through a spring of constant K to point Q
   (8) % Point Q is located 4L below origin of Newtonian Frame
   (9) NewtonianFrame N 
   (10) RigidBody A, B 
   (11) A.SetMass(Ma)
   (12) A.SetInertia(Acm, Ix, Iy, Iz)
   (13) B.SetMass(Mb)
   (14) B.SetInertia(Bcm, Ix, Iy, Iz) % A and B are same shape bar
   (15) Point P(), R(), S(B), Q()
   (16) Variable Q1', Q2', U1', U2'
   (17) SetGeneralizedSpeed(U1, U2)
   (18) Constant L, K, g
   (19) %%% Kinematical Equations %%%
   (20) Q1' = U1
-> (21) Q1' = U1

   (22) Q2' = U2
-> (23) Q2' = U2

   (24) %%% Rotations %%%
   (25) A.Rotate(N, BodyZ, Q1)
-> (26) A_N = [cos(Q1), sin(Q1), 0;  -sin(Q1), cos(Q1), 0;  0, 0, 1]
-> (27) w_A_N> = U1*Az>
-> (28) alf_A_N> = U1'*Az>

   (29) B.Rotate(N, BodyZ, Q2)
-> (30) B_N = [cos(Q2), sin(Q2), 0;  -sin(Q2), cos(Q2), 0;  0, 0, 1]
-> (31) w_B_N> = U2*Bz>
-> (32) alf_B_N> = U2'*Bz>

   (33) %%% Translations %%%
   (34) V_P_N> = 0>
-> (35) V_P_N> = 0>

   (36) A_P_N> = 0>
-> (37) A_P_N> = 0>

   (38) Acm.Translate(P, -L*Ay>)
-> (39) p_P_Acm> = -L*Ay>
-> (40) v_Acm_N> = L*U1*Ax>
-> (41) a_Acm_N> = L*U1'*Ax> + L*U1^2*Ay>

   (42) R.Translate(P, -2*L*Ay>)
-> (43) p_P_R> = -2*L*Ay>
-> (44) v_R_N> = 2*L*U1*Ax>
-> (45) a_R_N> = 2*L*U1'*Ax> + 2*L*U1^2*Ay>

   (46) Bcm.Translate(R, -L*By>)
-> (47) p_R_Bcm> = -L*By>
-> (48) v_Bcm_N> = 2*L*U1*Ax> + L*U2*Bx>
-> (49) a_Bcm_N> = 2*L*U1'*Ax> + 2*L*U1^2*Ay> + L*U2'*Bx> + L*U2^2*By>

   (50) S.Translate(R, -2*L*By>)
-> (51) p_R_S> = -2*L*By>
-> (52) v_S_N> = 2*L*U1*Ax> + 2*L*U2*Bx>
-> (53) a_S_N> = 2*L*U1'*Ax> + 2*L*U1^2*Ay> + 2*L*U2'*Bx> + 2*L*U2^2*By>

   (54) Q.Translate(P, -L*Nx> -4*L*Ny>)
-> (55) p_P_Q> = -L*Nx> - 4*L*Ny>
-> (56) v_Q_N> = 0>
-> (57) a_Q_N> = 0>

   (58) %%% Partial Velocities %%%
   (59) VA_Partials = Acm.GetPartialVelocity(N)
-> (60) VA_Partials = [L*Ax>;  0>]

   (61) VAcm_Partial1> = VA_Partials[1]
-> (62) VAcm_Partial1> = L*Ax>

   (63) VAcm_Partial2> = VA_Partials[2]
-> (64) VAcm_Partial2> = 0>

   (65) VB_Partials = Bcm.GetPartialVelocity(N)
-> (66) VB_Partials = [2*L*Ax>;  L*Bx>]

   (67) VBcm_Partial1> = VB_Partials[1]
-> (68) VBcm_Partial1> = 2*L*Ax>

   (69) VBcm_Partial2> = VB_Partials[2]
-> (70) VBcm_Partial2> = L*Bx>

   (71) WA_Partial1> = A.GetPartialAngularVelocity(N, U1)
-> (72) WA_Partial1> = Az>

   (73) WA_Partial2> = A.GetPartialAngularVelocity(N, U2)
-> (74) WA_Partial2> = 0>

   (75) WB_Partial1> = B.GetPartialAngularVelocity(N, U1)
-> (76) WB_Partial1> = 0>

   (77) WB_Partial2> = B.GetPartialAngularVelocity(N, U2)
-> (78) WB_Partial2> = Bz>

   (79) %%% Forces %%%
   (80) System.AddForceGravity( -g*Ny> )
-> (81) Force_Acm> = -Ma*g*Ny>
-> (82) Force_Bcm> = -Mb*g*Ny>

   (83) S.AddForceSpring(Q, K, L)
-> (84) Force_S_Q> = -K*L*(-2+L/sqrt(-L^2*(-6.25+4*cos(Q1)+4*cos(Q2)-sin(Q1)-
        sin(Q2)-2*cos(Q1-Q2))))*Ay> - K*L*(-2+L/sqrt(-L^2*(-6.25+4*cos(Q1)+4*
        cos(Q2)-sin(Q1)-sin(Q2)-2*cos(Q1-Q2))))*By> + 0.5*K*L*(-2+L/sqrt(-L^2*(
        -6.25+4*cos(Q1)+4*cos(Q2)-sin(Q1)-sin(Q2)-2*cos(Q1-Q2))))*Nx> + 2*K*L*(
        -2+L/sqrt(-L^2*(-6.25+4*cos(Q1)+4*cos(Q2)-sin(Q1)-sin(Q2)-2*cos(Q1-Q2))))*Ny>

   (85) %%% Effective Moments %%%
   (86) NMA_Acm> = dot(I_A_Acm>>, alf_A_N>) + cross(W_A_N>, dot(I_A_Acm>>, W_A_N>))
-> (87) NMA_Acm> = Iz*U1'*Az>

   (88) NMB_Bcm> = dot(I_B_Bcm>>, alf_B_N>) + cross(W_B_N>, dot(I_B_Bcm>>, W_B_N>))
-> (89) NMB_Bcm> = Iz*U2'*Bz>

   (90) %%% Kane's Equations %%%
   (91) F1 = dot(A.GetResultantForce(), VAcm_Partial1>) + dot(B.GetResultantForce(), VBcm_Partial1>) + dot(A.GetResultantMoment(Acm), WA_Partial1>) + dot(B.GetResultantMoment(Bcm), WB_Partial1>)
-> (92) F1 = L*(K*L*cos(Q1)*(-2+L/sqrt(-L^2*(-6.25+4*cos(Q1)+4*cos(Q2)-sin(Q1)-
        sin(Q2)-2*cos(Q1-Q2))))-Ma*g*sin(Q1)-2*K*L*sin(Q1-Q2)*(-2+L/sqrt(-L^2*(
        -6.25+4*cos(Q1)+4*cos(Q2)-sin(Q1)-sin(Q2)-2*cos(Q1-Q2))))-2*sin(Q1)*(
        Mb*g-2*K*L*(-2+L/sqrt(-L^2*(-6.25+4*cos(Q1)+4*cos(Q2)-sin(Q1)-sin(Q2)-2
        *cos(Q1-Q2))))))

   (93) F1_N = dot(Ma*A_Acm_N>, VAcm_Partial1>) + dot(Mb*A_Bcm_N>, VBcm_Partial1>) + dot(NMA_Acm>, WA_Partial1>) + dot(NMB_Bcm>, WB_Partial1>)
-> (94) F1_N = Iz*U1' + Ma*L^2*U1' + 2*Mb*L^2*(sin(Q1-Q2)*U2^2+2*U1'+cos(Q1-Q2)
        *U2')

   (95) F2 = dot(A.GetResultantForce(), VAcm_Partial2>) + dot(B.GetResultantForce(), VBcm_Partial2>) + dot(A.GetResultantMoment(Acm), WA_Partial2>) + dot(B.GetResultantMoment(Bcm), WB_Partial2>)
-> (96) F2 = -L*(Mb*g*sin(Q2)-4*K*L*sin(Q2)*(-2+L/sqrt(-L^2*(-6.25+4*cos(Q1)+4*
        cos(Q2)-sin(Q1)-sin(Q2)-2*cos(Q1-Q2))))-K*L*cos(Q2)*(-2+L/sqrt(-L^2*(-6.25
        +4*cos(Q1)+4*cos(Q2)-sin(Q1)-sin(Q2)-2*cos(Q1-Q2))))-2*K*L*sin(Q1-Q2)*(
        -2+L/sqrt(-L^2*(-6.25+4*cos(Q1)+4*cos(Q2)-sin(Q1)-sin(Q2)-2*cos(Q1-Q2)))))

   (97) F2_N = dot(Ma*A_Acm_N>, VAcm_Partial2>) + dot(Mb*A_Bcm_N>, VBcm_Partial2>) + dot(NMA_Acm>, WA_Partial2>) + dot(NMB_Bcm>, WB_Partial2>)
-> (98) F2_N = Iz*U2' - Mb*L^2*(2*sin(Q1-Q2)*U1^2-U2'-2*cos(Q1-Q2)*U1')

   (99) zero[1] = explicit(F1 - F1_N)
-> (100) zero[1] = L*(K*L*cos(Q1)*(-2+L/sqrt(-L^2*(-6.25+4*cos(Q1)+4*cos(Q2)-
         sin(Q1)-sin(Q2)-2*cos(Q1-Q2))))-Ma*g*sin(Q1)-2*K*L*sin(Q1-Q2)*(-2+L/
         sqrt(-L^2*(-6.25+4*cos(Q1)+4*cos(Q2)-sin(Q1)-sin(Q2)-2*cos(Q1-Q2))))-2
         *sin(Q1)*(Mb*g-2*K*L*(-2+L/sqrt(-L^2*(-6.25+4*cos(Q1)+4*cos(Q2)-sin(
         Q1)-sin(Q2)-2*cos(Q1-Q2)))))) - Iz*U1' - Ma*L^2*U1' - 2*Mb*L^2*(sin(
         Q1-Q2)*U2^2+2*U1'+cos(Q1-Q2)*U2')

   (101) zero[2] = explicit(F2 - F2_N)
-> (102) zero[2] = Mb*L^2*(2*sin(Q1-Q2)*U1^2-U2'-2*cos(Q1-Q2)*U1') - L*(Mb*g*
         sin(Q2)-4*K*L*sin(Q2)*(-2+L/sqrt(-L^2*(-6.25+4*cos(Q1)+4*cos(Q2)-sin(
         Q1)-sin(Q2)-2*cos(Q1-Q2))))-K*L*cos(Q2)*(-2+L/sqrt(-L^2*(-6.25+4*cos(
         Q1)+4*cos(Q2)-sin(Q1)-sin(Q2)-2*cos(Q1-Q2))))-2*K*L*sin(Q1-Q2)*(-2+L/
         sqrt(-L^2*(-6.25+4*cos(Q1)+4*cos(Q2)-sin(Q1)-sin(Q2)-2*cos(Q1-Q2)))))
         - Iz*U2'

   (103) zero_auto = System.GetDynamicsKane()
-> (104) zero_auto[1] = 2*Mb*L^2*cos(Q1-Q2)*U2' + (Iz+Ma*L^2+4*Mb*L^2)*U1'
         - L*(K*L*(cos(Q1)+4*sin(Q1)-2*sin(Q1-Q2))*(-2+L/sqrt(-L^2*(-6.25+4*cos
         (Q1)+4*cos(Q2)-sin(Q1)-sin(Q2)-2*cos(Q1-Q2))))-2*Mb*g*sin(Q1)-Ma*g*sin
         (Q1)-2*Mb*L*sin(Q1-Q2)*U2^2)

-> (105) zero_auto[2] = L*(Mb*g*sin(Q2)-K*L*(cos(Q2)+4*sin(Q2)+2*sin(Q1-Q2))*(-2
         +L/sqrt(-L^2*(-6.25+4*cos(Q1)+4*cos(Q2)-sin(Q1)-sin(Q2)-2*cos(Q1-Q2))))
         -2*Mb*L*sin(Q1-Q2)*U1^2) + (Iz+Mb*L^2)*U2' + 2*Mb*L^2*cos(Q1-Q2)*U1'

   (106) check = explicit(zero + zero_auto)
-> (107) check = [0;  0]

   (108) ODE(zero, U1', U2') KaneEx7.m

   (109) 